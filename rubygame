#! /usr/bin/env ruby

require 'gosu'

# Module with z-orders for textures
module ZOrder
  BACKGROUND, DEAD, HUMAN, PLAYER, UI = *0..4
end

# Module for textures
module Textures
  def self.load
    @textures ||= {
      background: Gosu::Image.new('img/background.jpg', tileable: true),
      background_menu: Gosu::Image.new('img/startscreen.jpg', tileable: true),
      player: Gosu::Image.new('img/car.bmp'),
      human: Gosu::Image.load_tiles('img/males.png', 25, 25),
      human_dead: Gosu::Image.new('img/dead.bmp')
    }
  end

  def self.get(texture)
    Textures.load[texture]
  end
end

# Module for sounds
module Sounds
  def self.load
    @sounds ||= {
      main_music: Gosu::Song.new('wav/ost1_game.wav'),
      car_idle: Gosu::Sample.new('wav/caridle.wav'),
      car_drive: Gosu::Sample.new('wav/cardrive.wav'),
      human_death: Gosu::Sample.new('wav/death.wav')
    }
  end

  def self.get(sound)
    Sounds.load[sound]
  end
end

# Game module
module Game
  def self.load
    @menu = MenuWindow.new
    @menu.show
  end

  def self.start
    @game = GameWindow.new
    Game.properties[:width] = @game.width
    Game.properties[:height] = @game.height
    @game.show
  end

  def self.properties
    @properties ||= {}
  end
end

# Represents a dead human
class DeadHuman
  attr_accessor :x, :y

  def initialize(x, y)
    self.x = x
    self.y = y
    load_textures
    @draw_pos_x = @x - @image.width / 2
    @draw_pos_y = @y - @image.height / 2
  end

  def draw
    @image.draw(@draw_pos_x, @draw_pos_y, ZOrder::DEAD)
  end

  private

  def load_textures
    @image = Textures.get(:human_dead)
  end
end

# Represents an alive human
class Human
  attr_reader :x, :y, :death

  def initialize
    @x = @y = @vel_x = @vel_y = @angle = 0.0
    @speed = 5.0
    load_textures
    set_music
    set_position
    set_color
  end

  def draw
    image = @animation[Gosu.milliseconds / 100 % @animation.size]
    image.draw(
      @x - image.width / 2.0,
      @y - image.height / 2.0,
      ZOrder::HUMAN,
      1,
      1,
      @color,
      :add
    )
  end

  def accelerate
    @angle = rand(360)
    @vel_x += Gosu.offset_x(@angle, 0.5)
    @vel_y += Gosu.offset_y(@angle, 0.5)
  end

  def move
    @x += @vel_x * @speed
    @y += @vel_y * @speed
    @x %= Game.properties[:width]
    @y %= Game.properties[:height]

    @vel_x *= 0.95
    @vel_y *= 0.95
  end

  def run_away
    accelerate
    move
  end

  private

  def load_textures
    @animation = Textures.get(:human)
  end

  def set_music
    @death = Sounds.get(:human_death)
  end

  def set_position
    @x = rand * Game.properties[:width]
    @y = rand * Game.properties[:height]
  end

  def set_color
    @color = Gosu::Color.new(0xff_00_00_00)
    @color.red = rand(256 - 40) + 40
    @color.green = rand(256 - 40) + 40
    @color.blue = rand(256 - 40) + 40
  end
end

# Represents the player
class Player
  attr_reader :score

  def initialize
    @x = @y = @vel_x = @vel_y = @angle = 0.0
    @speed = 1.0
    @score = 0
    load_textures
    set_music
  end

  def warp(x, y)
    @x = x
    @y = y
  end

  def turn_left
    # @car_drive.play(0.5, 1)
    @angle -= 4.5
  end

  def turn_right
    # @car_drive.play(0.5, 1)
    @angle += 4.5
  end

  def accelerate
    # @car_drive.play(0.5, 1)
    @vel_x += Gosu.offset_x(@angle, 0.5)
    @vel_y += Gosu.offset_y(@angle, 0.5)
  end

  def speed_up
    @speed += 0.1 if @speed < 3.0
  end

  def speed_down
    @speed -= 0.1 if @speed > 1.0
  end

  def move
    @x += @vel_x * @speed
    @y += @vel_y * @speed
    @x %= Game.properties[:width]
    @y %= Game.properties[:height]

    @vel_x *= 0.95
    @vel_y *= 0.95
  end

  def scare_humans(humans)
    humans.each do |human|
      human.run_away if Gosu.distance(@x, @y, human.x, human.y) < 200
    end
  end

  def collect_humans(humans, dead_humans)
    humans.reject! do |human|
      if Gosu.distance(@x, @y, human.x, human.y) < 35
        @score += 1
        human.death.play(0.25, 2)
        dead_humans.push(DeadHuman.new(human.x, human.y))
        true
      else
        false
      end
    end
  end

  def die
    @car_idle_channel.stop
  end

  def draw
    @image.draw_rot(@x, @y, ZOrder::PLAYER, @angle)
  end

  private

  def load_textures
    @image = Textures.get(:player)
  end

  def set_music
    @car_idle = Sounds.get(:car_idle)
    @car_drive = Sounds.get(:car_drive)
    @car_idle_channel = @car_idle.play(0.5, 1, true)
  end
end

# Represents a menu window
class MenuWindow < Gosu::Window
  def initialize(width = 640, height = 480)
    super width, height
    self.caption = 'Press Enter'
    load_textures
  end

  def draw
    @background.draw(0, 0, ZOrder::BACKGROUND)
  end

  def button_down(id)
    start_game if id == Gosu::KbReturn
    close if id == Gosu::KbEscape
  end

  private

  def load_textures
    @background = Textures.get(:background_menu)
  end

  def start_game
    Game.start
    close
  end
end

# Represents a game window
class GameWindow < Gosu::Window
  def initialize(width = 640, height = 480)
    super width, height
    self.caption = 'Enjoy'
    @humans = []
    @dead_humans = []
    load_textures
    load_player
    set_music
  end

  def update
    update_player
    update_humans
    update_music
  end

  def draw
    @background.draw(0, 0, ZOrder::BACKGROUND)
    @player.draw
    @humans.each(&:draw)
    @dead_humans.each(&:draw)
    draw_score
  end

  def button_down(id)
    return_menu if id == Gosu::KbEscape
  end

  private

  def player_interaction
    @player.scare_humans(@humans)
    @player.collect_humans(@humans, @dead_humans)
  end

  def load_textures
    @background = Textures.get(:background)
    @score_font = Gosu::Font.new(20)
  end

  def load_player(x = 320, y = 240)
    @player = Player.new
    @player.warp(x, y)
  end

  def set_music
    @music = Sounds.get(:main_music)
    @music.volume = 0.5
    @music.play(true)
  end

  def draw_score
    @score_font.draw(
      "Killed: #{@player.score}",
      10,
      10,
      ZOrder::UI,
      1.0,
      1.0,
      0xf0_f000f0
    )
  end

  def update_music(volume = 0.05)
    @music.volume += volume if Gosu.button_down?(Gosu::Kb0)
    @music.volume -= volume if Gosu.button_down?(Gosu::Kb9)
  end

  def update_player
    @player.accelerate if Gosu.button_down?(Gosu::KbW)
    @player.turn_left if Gosu.button_down?(Gosu::KbA)
    @player.turn_right if Gosu.button_down?(Gosu::KbD)
    if Gosu.button_down? Gosu::KbLeftShift
      @player.speed_up
    else
      @player.speed_down
    end
    @player.move
    player_interaction
  end

  def update_humans
    @humans.push(Human.new) if rand(100) < 4 && @humans.size < 25
  end

  def return_menu
    @player.die
    @music.stop
    Game.load
    close
  end
end

Textures.load
Sounds.load
Game.load
